<?php
namespace Slothsoft\MTG\Assets;

use Slothsoft\Core\IO\Writable\ChunkWriterInterface;
use Slothsoft\Core\IO\Writable\Delegates\ChunkWriterFromChunkWriterDelegate;
use Slothsoft\Farah\FarahUrl\FarahUrlArguments;
use Slothsoft\Farah\Module\Asset\AssetInterface;
use Slothsoft\Farah\Module\Asset\ExecutableBuilderStrategy\ExecutableBuilderStrategyInterface;
use Slothsoft\Farah\Module\Executable\ExecutableStrategies;
use Slothsoft\Farah\Module\Executable\ResultBuilderStrategy\ChunkWriterResultBuilder;
use Slothsoft\MTG\Oracle;
use Slothsoft\MTG\Oracle\Work\End;
use Slothsoft\MTG\Oracle\Work\OracleWorkManager;
use Slothsoft\MTG\Oracle\Work\PrepareCustom;
use Slothsoft\MTG\Oracle\Work\PrepareGatherer;
use Slothsoft\MTG\Oracle\Work\PrepareImages;
use Slothsoft\MTG\Oracle\Work\PreparePrices;
use Slothsoft\MTG\Oracle\Work\PrepareXml;
use Slothsoft\MTG\Oracle\Work\Start;

class WorkBuilder implements ExecutableBuilderStrategyInterface
{
    public function buildExecutableStrategies(AssetInterface $context, FarahUrlArguments $args): ExecutableStrategies
    {
        $delegate = function() : ChunkWriterInterface {
            $oracle = new Oracle('mtg');
            
            $manager = new OracleWorkManager(8, $oracle);
            
            return $manager
                ->thenDo(Start::class)
                ->thenWait()
                ->thenDo(PrepareCustom::class, ['imageDir' => 'todo', 'setDir' => 'todo'])
                ->thenDo(PrepareGatherer::class)
                ->thenWait()
                ->thenDo(PreparePrices::class)
                ->thenWait()
                ->thenDo(PrepareXml::class)
                ->thenDo(PrepareImages::class, ['imageDir' => 'todo'])
                ->thenWait()
                ->thenDo(End::class);
        };
        $writer = new ChunkWriterFromChunkWriterDelegate($delegate);
        $resultBuilder = new ChunkWriterResultBuilder($writer, 'work.txt');
        return new ExecutableStrategies($resultBuilder);
    }
}



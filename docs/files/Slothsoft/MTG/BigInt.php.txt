<?php
declare(strict_types = 1);
namespace Slothsoft\MTG;

class BigInt
{

    const DIGIT_SIZE = 4;

    public static function createFromHex($hex)
    {
        $hex = (string) $hex;
        
        for ($i = strlen($hex), $j = 0; $i > 0; $i -= self::DIGIT_SIZE, $j ++) {
            $digits[$j] = hexdec(substr($hex, max($i - self::DIGIT_SIZE, 0), min($i, self::DIGIT_SIZE)));
        }
        return self::createFromDigits($digits);
    }

    public static function createFromDec($dec = 0)
    {
        return new BigInt([
            $dec
        ]);
    }

    public static function createFromDigits(array $digits = [])
    {
        return new BigInt($digits);
    }

    public $digits;

    protected function __construct(array $digits)
    {
        $this->digits = $digits;
    }

    public function getHighIndex()
    {
        $ret = count($this->digits) - 1;
        while ($ret > 0 and ! $this->digits[$ret]) {
            $ret --;
        }
        return $ret;
    }

    public function toHex()
    {
        $ret = '';
        for ($i = $this->getHighIndex(); $i > - 1; $i --) {
            $ret .= str_pad(dechex($this->digits[$i]), self::DIGIT_SIZE, '0', STR_PAD_LEFT);
        }
        return $ret;
    }

    public function shiftRight($i)
    {
        $ret = clone $this;
        return $ret;
    }

    public function multiplyMod(BigInt $input, BigInt $modulus)
    {
        $ret = clone $input;
        
        return $ret;
    }

    public function powMod(BigInt $modulus, BigInt $encryptionExponent)
    {
        return $this;
        
        $ret = self::createFromDec(1);
        
        $a = $this;
        
        while ($encryptionExponent->getHighIndex() or $encryptionExponent->digits[0]) {
            if (($encryptionExponent->digits[0] & 1) !== 0) {
                $ret = $a->multiplyMod($ret, $modulus);
            }
            $encryptionExponent = $encryptionExponent->shiftRight(1);
            $a = $a->multiplyMod($a, $a);
        }
        return $ret;
        /*
         * var result = new BigInt();
         * result.digits[0] = 1;
         * var a = x;
         * var k = y;
         * while (true) {
         * if ((k.digits[0] & 1) != 0) result = this.multiplyMod(result, a);
         * k = biShiftRight(k, 1);
         * if (k.digits[0] == 0 && biHighIndex(k) == 0) break;
         * a = this.multiplyMod(a, a);
         * }
         * return result;
         * //
         */
    }
}

<?php
declare(strict_types = 1);
namespace Slothsoft\MTG;

use Slothsoft\Core\DOMHelper;
use Slothsoft\Core\Storage;
use Slothsoft\Core\Calendar\Seconds;
use DOMDocument;
use Exception;
use Serializable;

class Oracle implements Serializable
{

    private $doc;

    private $dbName;

    private $idTableName = 'oracle-ids';

    private $xmlTableName = 'oracle-xml';

    private $customTableName = 'oracle-custom';

    private $idTable;

    private $xmlTable;

    private $customTable;

    private $_oracleSetURL = 'http://gatherer.wizards.com/Pages/Advanced.aspx';

    private $_oracleSetQuery = '//*[@id="autoCompleteSourceBoxsetAddText0_InnerTextBoxcontainer"]/*';

    private $_oracleSetList = null;

    private $_oracleSetBlacklist = [
        'Promo set for Gatherer'
    ];

    public function __construct(string $dbName, ?DOMDocument $doc = null)
    {
        $this->dbName = $dbName;
        
        $this->doc = $doc;
        
        $this->idTable = null;
        $this->xmlTable = null;
        $this->customTable = null;
        
        // $this->initTables();
        // my_dump(array_diff(OracleInfo::getSetList(), $this->getOracleSetList()));
    }

    public function initTables()
    {
        $table = $this->getIdTable();
        $table->init();
        $table = $this->getXMLTable();
        $table->init();
        $table = $this->getCustomTable();
        $table->init();
    }

    public function getIdTable()
    {
        if (! $this->idTable) {
            $this->idTable = new OracleIdTable($this->dbName, $this->idTableName);
        }
        return $this->idTable;
    }

    public function getXMLTable()
    {
        if (! $this->xmlTable) {
            $this->xmlTable = new OracleXMLTable($this->dbName, $this->xmlTableName);
        }
        return $this->xmlTable;
    }

    public function getCustomTable()
    {
        if (! $this->customTable) {
            $this->customTable = new OracleCustomTable($this->dbName, $this->customTableName);
        }
        return $this->customTable;
    }

    public function getPlayer($playerFile)
    {
        return new OraclePlayer($playerFile, $this);
    }

    public function getReview($reviewFile)
    {
        return new OracleReview($reviewFile, $this);
    }

    public function getCardImage($imageDir, $oracleId, $setAbbr, $setNo)
    {
        try {
            $ret = new OracleCardImage($this, $imageDir, $oracleId, $setAbbr, $setNo);
        } catch (Exception $e) {
            $ret = null;
        }
        return $ret;
    }

    public function getRarityImage($imageDir, $setAbbr, $rarity)
    {
        try {
            $ret = new OracleRarityImage($this, $imageDir, $setAbbr, $rarity);
        } catch (Exception $e) {
            $ret = null;
        }
        return $ret;
    }

    public function getSetImage($imageDir, $setAbbr)
    {
        try {
            $ret = new OracleSetImage($this, $imageDir, $setAbbr);
        } catch (Exception $e) {
            $ret = null;
        }
        return $ret;
    }

    public function getColorImage($imageDir, $color)
    {
        try {
            $ret = new OracleColorImage($this, $imageDir, $color);
        } catch (Exception $e) {
            $ret = null;
        }
        return $ret;
    }

    public function getSetList()
    {
        $ret = [];
        if ($idTable = $this->getIdTable()) {
            $nameList = $idTable->getExpansionList();
            foreach ($nameList as $name) {
                $arr['name'] = $name;
                $arr['count'] = count($idTable->getNameListBySetName($name));
                $ret[$name] = $arr;
            }
        }
        return $ret;
    }

    public function getOracleSetList($downloadFreshCopy = false)
    {
        if ($this->_oracleSetList === null) {
            if ($xpath = Storage::loadExternalXPath($this->_oracleSetURL, $downloadFreshCopy ? 0 : Seconds::YEAR)) {
                $this->_oracleSetList = [];
                $nodeList = $xpath->evaluate($this->_oracleSetQuery);
                foreach ($nodeList as $node) {
                    $set = $xpath->evaluate('normalize-space(.)', $node);
                    if (strlen($set) and ! in_array($set, $this->_oracleSetBlacklist)) {
                        $this->_oracleSetList[] = $set;
                    }
                }
            }
        }
        return $this->_oracleSetList;
    }

    public function createSearchElement(DOMDocument $dataDoc, $inputQuery, $stock = 1)
    {
        if (is_array($inputQuery)) {
            $query = $inputQuery;
        } else {
            if (preg_match('/(.+)#(.+)/', $inputQuery, $match)) {
                $query = [
                    'expansion_abbr' => $match[1],
                    'expansion_number' => $match[2]
                ];
            } else {
                $query = [
                    'name' => $inputQuery
                ];
            }
        }
        $query = array_merge([
            'name' => '',
            'type' => '',
            'rarity' => '',
            'expansion_name' => '',
            'description' => '',
            'cost' => '',
            'legality' => '',
            'cmc' => '',
            'expansion_abbr' => '',
            'expansion_number' => ''
        ], $query);
        foreach ($query as &$val) {
            if (is_array($val)) {
                $val = implode(' ', $val);
            }
        }
        unset($val);
        // my_dump([$stock, $query]);
        $retNode = $dataDoc->createElement('search');
        $retNode->setAttribute('query', (strlen($query['name']) or is_array($inputQuery)) ? $query['name'] : $inputQuery);
        foreach ($query as $key => $val) {
            $retNode->setAttribute('query-' . $key, $val);
        }
        $retNode->setAttribute('stock', $stock);
        // my_dump($query);
        /*
         * $cardList = implode('', $query) === $query['name']
         * ? $this->getXMLTable()->searchNameByName($query['name'])
         * : $this->getIdTable()->searchNameByCard($query);
         * //
         */
        $cardList = $this->getIdTable()->searchNameByCard($query);
        // my_dump($cardList);
        if ($searchFragment = $this->createCardFragment($dataDoc, $cardList)) {
            $retNode->appendChild($searchFragment);
        }
        return $retNode;
    }

    public function createSetElement(DOMDocument $dataDoc, $setName, array $stockList = [])
    {
        $retNode = $dataDoc->createElement('set');
        $retNode->setAttribute('name', $setName);
        
        $idTable = $this->getIdTable();
        $nameList = $idTable->getNameListBySetName($setName);
        if ($fragment = $this->createCardFragment($dataDoc, $nameList, $stockList)) {
            $retNode->appendChild($fragment);
        }
        /*
         * $cardList = $idTable->getCardListBySetName($setName);
         * if ($fragment = $this->createCardListFragment($dataDoc, $cardList, $stockList)) {
         * $retNode->appendChild($fragment);
         * }
         * //
         */
        return $retNode;
    }

    public function createCategoriesElement(DOMDocument $dataDoc = null)
    {
        if (! $dataDoc) {
            $dataDoc = $this->doc;
        }
        $categoryNode = $dataDoc->createElement('categories');
        $categoryNode->appendChild(OracleInfo::getTypeFragment($dataDoc));
        $categoryNode->appendChild(OracleInfo::getRarityFragment($dataDoc));
        $categoryNode->appendChild(OracleInfo::getColorFragment($dataDoc));
        $categoryNode->appendChild(OracleInfo::getSetFragment($dataDoc));
        $categoryNode->appendChild(OracleInfo::getLegalityFragment($dataDoc));
        return $categoryNode;
    }

    public function createCardFragment(DOMDocument $dataDoc = null, array $nameList = [], array $stockList = null)
    {
        if (! $dataDoc) {
            $dataDoc = $this->doc;
        }
        foreach ($nameList as &$name) {
            $name = $this->_sanitizeName($name);
        }
        unset($name);
        if (! $dataDoc) {
            $dataDoc = $this->doc;
        }
        $xmlTable = $this->getXMLTable();
        $xml = $xmlTable->getXMLListByNameList($nameList);
        $xml = implode('', $xml);
        $fragment = $this->dom()->parse($xml, $dataDoc);
        if (is_array($stockList)) {
            foreach ($fragment->childNodes as $cardNode) {
                if ($cardNode->nodeType === XML_ELEMENT_NODE) {
                    $name = $cardNode->getAttribute('name');
                    $stock = isset($stockList[$name]) ? $stockList[$name] : 0;
                    $cardNode->setAttribute('stock', $stock);
                    if ($stock > 0) {
                        $cardNode->setAttribute('owned', '');
                    }
                }
            }
        }
        return $fragment->hasChildNodes() ? $fragment : null;
    }

    public function createCardElement(DOMDocument $dataDoc = null, $name = '')
    {
        if (! $dataDoc) {
            $dataDoc = $this->doc;
        }
        $name = $this->_sanitizeName($name);
        $ret = null;
        $xmlTable = $this->getXMLTable();
        if ($xml = $xmlTable->getXMLListByNameList([
            $name
        ])) {
            $xml = implode('', $xml);
            if ($fragment = $this->dom()->parse($xml, $dataDoc)) {
                $ret = $fragment->removeChild($fragment->firstChild);
            }
        }
        return $ret;
    }

    public function createCardElementList(DOMDocument $dataDoc = null, array $nameList = [])
    {
        foreach ($nameList as &$name) {
            $name = $this->_sanitizeName($name);
        }
        unset($name);
        if (! $dataDoc) {
            $dataDoc = $this->doc;
        }
        $ret = [];
        $xmlTable = $this->getXMLTable();
        $xml = $xmlTable->getXMLListByNameList($nameList);
        $xml = implode('', $xml);
        $fragment = $this->dom()->parse($xml, $dataDoc);
        while ($fragment->hasChildNodes()) {
            $node = $fragment->removeChild($fragment->firstChild);
            $ret[$node->getAttribute('name')] = $node;
        }
        return $ret;
    }

    public function createChecklistElement(DOMDocument $dataDoc, array $stockList)
    {
        $checklistNode = $dataDoc->createElement('checklist');
        $setNameList = OracleInfo::getVintageLegalList();
        foreach ($setNameList as $setName) {
            if ($setNode = $this->createSetElement($dataDoc, $setName, $stockList)) {
                $checklistNode->appendChild($setNode);
            }
        }
        return $checklistNode;
    }

    public function createPricelistElement(DOMDocument $dataDoc, array $stockList)
    {
        $retNode = $dataDoc->createElement('pricelist');
        
        $idTable = $this->getIdTable();
        $setNode = $dataDoc->createElement('set');
        $setNode->setAttribute('name', 'Magiccardmarket');
        $setNode->setAttribute('href', 'https://www.magiccardmarket.eu/');
        
        $nameList = array_keys($stockList);
        if ($fragment = $this->createCardFragment($dataDoc, $nameList, $stockList)) {
            $setNode->appendChild($fragment);
        }
        /*
         * $cardList = [];
         * $tmpList = $idTable->getCardListByNameList($nameList);
         * foreach ($tmpList as $card) {
         * $cardList[$card['name']] = $card;
         * }
         * if ($fragment = $this->createCardListFragment($dataDoc, $cardList, $stockList)) {
         * $setNode->appendChild($fragment);
         * }
         * //
         */
        $retNode->appendChild($setNode);
        return $retNode;
    }

    protected function _sanitizeName($name)
    {
        // $name = str_replace(' & ', ' // ', $name);
        return $name;
    }
    
    private function dom() : DOMHelper {
        return new DOMHelper();
    }

    public function serialize()
    {
        return $this->dbName;
    }

    public function unserialize($data)
    {
        $this->__construct($data);
    }
}

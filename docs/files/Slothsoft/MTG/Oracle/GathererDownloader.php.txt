<?php
namespace Slothsoft\MTG\Oracle;

use Slothsoft\Core\Storage;
use Slothsoft\Core\Calendar\Seconds;
use Slothsoft\MTG\OracleInfo;
use Exception;

class GathererDownloader
{
    private static function getSetCardsUrl(string $setName, int $setPage) : string {
        return sprintf(
            'http://gatherer.wizards.com/Pages/Search/Default.aspx?output=checklist&action=advanced&special=true&set=["%s"]&page=%d',
            urlencode($setName),
            $setPage
        );
    }
    private static function getCardDetailsUrl(int $oracleId) : string {
        return sprintf(
            'http://gatherer.wizards.com/Pages/Card/Details.aspx?multiverseid=%s',
            $oracleId
        );
    }
    
    public function getCardIdsBySetName(string $setName) : iterable {
        $ret = [];
        for ($setPage = 0; $setPage < 10; $setPage ++) {
            $setURI = self::getSetCardsUrl($setName, $setPage);
            $newCards = false;
            
            if ($xpath = Storage::loadExternalXPath($setURI, Seconds::DAY)) {
                $nodeList = $xpath->evaluate('//html:tr[@class = "cardItem"]');
                foreach ($nodeList as $node) {
                    $cardId = (int) $xpath->evaluate('substring-after(.//html:a[@class = "nameLink"]/@href, "multiverseid=")', $node);
                    if ($cardId > 0) {
                        $idList = $this->getIdVariations($cardId);
                        foreach ($idList as $id) {
                            if (! isset($ret[$id])) {
                                $newCards = true;
                                $ret[$id] = $id;
                            }
                        }
                    }
                }
                if (! $newCards) {
                    break;
                }
            } else {
                throw new Exception(sprintf('ERROR gathering cards from: %s', $setURI));
            }
        }
        return array_values($ret);
    }
    
    private function getIdVariations(int $oracleId) : iterable
    {
        $ret = [];
        $ret[] = $oracleId;
        
        $url = self::getCardDetailsUrl($oracleId);
        if ($xpath = Storage::loadExternalXPath($url, Seconds::YEAR)) {
            $nodeList = $xpath->evaluate('//*[@class="variationLink"]');
            foreach ($nodeList as $node) {
                $ret[] = (int) $node->getAttribute('id');
            }
        }
        
        return array_unique($ret);
    }
    
    public function getCardById(int $oracleId) : Card {
        return new Card($this->getCardDataById($oracleId));
    }
    private function getCardDataById(int $oracleId) : array
    {
        static $setNumberMap = [];
        static $setMappingList = [
            25498 => '6e',
            25492 => '6e',
            25477 => '6e',
            25503 => '6e',
            25500 => '6e',
            25507 => '6e',
            25514 => '6e',
            25510 => '6e',
            25483 => '6e',
            25502 => '6e',
            25486 => '6e',
            25536 => '6e',
            25526 => '6e',
            25452 => '6e',
            25508 => '6e',
            25458 => '6e',
            25481 => '6e',
            25528 => '6e',
            25540 => '6e',
            25454 => '6e',
            25506 => '6e',
            25499 => '6e',
            25529 => '6e',
            25533 => '6e',
            25487 => '6e',
            25501 => '6e',
            25543 => '6e',
            25497 => '6e',
            25479 => '6e',
            25504 => '6e',
            25515 => '6e',
            25448 => '6e',
            // http://gatherer.wizards.com/Pages/Search/Default.aspx?action=advanced&set=[%22Promo%20set%20for%20Gatherer%22]
            // http://magiccards.info/mbp/en.html
            25496 => 'ppr',
            // http://magiccards.info/8eb/en.html
            47784 => '8eb',
            47788 => '8eb',
            47785 => '8eb',
            47786 => '8eb',
            47789 => '8eb',
            47787 => '8eb',
            49056 => '8eb',
            // http://magiccards.info/9eb/en.html
            83064 => '9eb',
            83319 => '9eb',
            84073 => '9eb',
            83104 => '9eb',
            94912 => '9eb',
            94911 => '9eb',
            94910 => '9eb',
            83075 => '9eb',
            94914 => '9eb'
        ];
        static $idBlackList = [
            190199,
            201842,
            201843,
            386322,
            159048,
            159047,
            159056,
            209163,
            207998,
            209162,
            197936,
            197937,
            197261,
            5503,
            4979,
            5560,
            5472,
            5607,
            5601
        ];
        
        $ret = [];
        
        if (in_array($oracleId, $idBlackList)) {
            throw new Exception(sprintf('Oracle ID "%d" is blacklisted.', $oracleId));
        }
        
        $ret['oracle_id'] = $oracleId;
        
        if ($data = OracleInfo::getOracleCardData($ret)) {
            $ret += $data;
        } else {
            throw new Exception(sprintf('OracleInfo::getOracleCardData ERROR: %s', $oracleId));
        }
        
        if (isset($setMappingList[$oracleId])) {
            $ret['expansion_abbr'] = $setMappingList[$oracleId];
        }
        
        $ret['type'] = str_replace([
            'Summon —',
            'Eaturecray —',
            'Summon - The Biggest, Baddest, Nastiest,',
            'Scariest Creature You\'ll Ever See'
        ], 'Creature —', $ret['type']);
        $ret['type'] = str_replace([
            'Enchant Player'
        ], 'Enchantment — Aura Curse', $ret['type']);
        $ret['type'] = str_replace([
            'Interrupt'
        ], 'Instant', $ret['type']);
        $ret['rarity'] = str_replace('Basic Land', 'Land', $ret['rarity']);
        $ret['image'] = OracleInfo::getOracleImageURL($ret);
        
//         if (OracleInfo::isCardToken($ret)) {
//             throw new Exception(sprintf('INVALID CARD TYPE: %s', print_r($ret, true)));
//         }
        if (! strlen($ret['name']) or ! strlen($ret['expansion_name']) or ! strlen($ret['expansion_abbr'])) {
            throw new Exception(sprintf('CARD NAME NOT FOUND: %s', OracleInfo::getOracleURL($ret)));
        }
        
//         $abbr = $ret['expansion_abbr'];
//         if (! isset($setNumberMap[$abbr])) {
//             $setNumberMap[$abbr] = $this->getCardNamesBySetAbbr($abbr);
//         }
        
//         if (count($setNumberMap[$abbr])) {
//             $no = $ret['expansion_number'];
//             $ret['expansion_number'] = sprintf('x-%s', $ret['oracle_id']);
//             $nameKey = OracleInfo::getNameKey($ret['name']);
//             if (isset($setNumberMap[$abbr][$no]) and $setNumberMap[$abbr][$no] === $nameKey) {
//                 $ret['expansion_number'] = $no;
//                 $ret['image'] = OracleInfo::getSetImageURL($ret);
//             } else {
//                 foreach ($setNumberMap[$abbr] as $i => $key) {
//                     if ($key === $nameKey) {
//                         $ret['expansion_number'] = $i;
//                         $ret['image'] = OracleInfo::getSetImageURL($ret);
//                         unset($setNumberMap[$abbr][$i]);
//                         break;
//                     }
//                 }
//             }
//         }
        
        if (! strlen($ret['expansion_number'])) {
            throw new Exception(sprintf('CARD NUMBER NOT FOUND: %s [%s] #%s', $ret['name'], OracleInfo::getNameKey($ret['name']), $oracleId), true);
        }
        
        $legality = OracleInfo::getCardLegality($ret);
        if ($legality !== null) {
            $ret['legality'] = implode(PHP_EOL, $legality);
        }
        $ret['cmc'] = OracleInfo::getCardCMC($ret);
        $ret['colors'] = OracleInfo::getCardColors($ret);
        
        return $ret;
    }
    
    private const XPATH_SET_LIST = '//tr[@class = "even" or @class="odd"]';
    
    private const XPATH_SET_CARDNUMBER = 'normalize-space(td[1])';
    
    private const XPATH_SET_CARDNAME = 'normalize-space(td[2])';
    
    private function getCardNamesBySetAbbr(string $setAbbr) : array
    {
        $ret = [];
        $data = ['expansion_abbr' => $setAbbr];
        $url = OracleInfo::getSetURL($data);
        if ($xpath = Storage::loadExternalXPath($url, Seconds::YEAR)) {
            $nodeList = $xpath->evaluate(self::XPATH_SET_LIST);
            foreach ($nodeList as $node) {
                $number = $xpath->evaluate(self::XPATH_SET_CARDNUMBER, $node);
                $name = $xpath->evaluate(self::XPATH_SET_CARDNAME, $node);
                $name = OracleInfo::getNameKey($name);
                $ret[$number] = $name;
            }
            if (! $ret) {
                Storage::clearExternalDocument($url);
            }
        }
        return $ret;
    }
}



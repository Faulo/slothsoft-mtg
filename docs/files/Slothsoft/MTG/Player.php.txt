<?php
declare(strict_types = 1);
namespace Slothsoft\MTG;

use Slothsoft\Core\DOMHelper;
use Slothsoft\Farah\HTTPRequest;
use DOMDocument;
use Exception;

class Player
{

    public $key;

    public $name;

    public $doc;

    public $file;

    public $xpath;

    public $deckList;

    public $repositoryDeck;

    public $unusedDeck;

    public $wishlistDeck;

    public $managedDeckList;

    protected $oracle;

    protected $saveLater = false;

    public function __construct($playerFile, Oracle $oracle)
    {
        $dom = new DOMHelper();
        $this->file = $playerFile;
        $this->oracle = $oracle;
        $this->doc = $dom->loadDocument($this->file);
        $this->xpath = $dom->loadXPath($this->doc);
        $this->key = basename($this->file);
        if ($name = $this->xpath->evaluate('string(/player/@name)')) {
            $this->name = $name;
        } else {
            $this->name = $this->key;
        }
        $this->deckList = array();
        $nodeList = $this->xpath->evaluate('/player/deck');
        $this->managedDeckList = [];
        foreach ($nodeList as $i => $node) {
            $deck = new Deck($this, $node, $this->oracle);
            $deckNo = null;
            if ($deck->getType() === 'repository') {
                $this->repositoryDeck = $deck;
                $deckNo = 'repository';
            }
            if ($deck->getType() === 'unused') {
                $this->unusedDeck = $deck;
                $deckNo = 'unused';
            }
            if ($deck->getType() === 'wishlist') {
                $this->wishlistDeck = $deck;
                $deckNo = 'wishlist';
            }
            if ($deck->getType() === 'managed') {
                $this->managedDeckList[] = $deck;
                $deckNo = $i + 1;
            }
            if ($deckNo) {
                $node->setAttribute('path', $deckNo);
                $this->deckList[$deckNo] = $deck;
            }
        }
        
        $this->initRepository();
        $this->initUnused();
    }

    public function initRepository()
    {
        if ($this->repositoryDeck) {
            $repositoryStockList = [];
            $cardList = $this->repositoryDeck->getCardList();
            foreach ($cardList as $name => $card) {
                $repositoryStockList[$name] = $this->repositoryDeck->getStock($name);
            }
            $managedStockList = [];
            foreach ($this->managedDeckList as $deck) {
                $cardList = $deck->getCardList();
                foreach ($cardList as $name => $card) {
                    if (! isset($managedStockList[$name])) {
                        $managedStockList[$name] = 0;
                    }
                    $managedStockList[$name] += $deck->getStock($name);
                }
            }
            foreach ($managedStockList as $name => $managedStock) {
                $add = true;
                if (isset($repositoryStockList[$name])) {
                    if ($repositoryStockList[$name] >= $managedStock) {
                        $add = false;
                    }
                }
                if ($add) {
                    // my_dump($this->file);
                    // my_dump($name);
                    // $this->repositoryDeck->addCard($name, $managedStock);
                }
            }
        }
    }

    public function initUnused()
    {
        if ($this->repositoryDeck and $this->unusedDeck) {
            $repositoryStockList = [];
            $cardList = $this->unusedDeck->getCardList();
            foreach ($cardList as $name => $card) {
                $repositoryStockList[$name] = 0;
            }
            $cardList = $this->repositoryDeck->getCardList();
            // my_dump(count($cardList));
            foreach ($cardList as $name => $card) {
                $repositoryStockList[$name] = $this->repositoryDeck->getStock($name);
            }
            foreach ($this->managedDeckList as $deck) {
                $cardList = $deck->getCardList();
                foreach ($cardList as $name => $card) {
                    if (! isset($repositoryStockList[$name])) {
                        $repositoryStockList[$name] = 0;
                    }
                    $repositoryStockList[$name] -= $deck->getStock($name);
                }
            }
            foreach ($repositoryStockList as $name => $managedStock) {
                if ($managedStock) {
                    if ($this->unusedDeck->getStock($name) !== $managedStock) {
                        $this->unusedDeck->addCard($name, $managedStock);
                    }
                } else {
                    $this->unusedDeck->removeCard($name);
                }
            }
        }
    }

    public function getDeck($deckNo)
    {
        return isset($this->deckList[$deckNo]) ? $this->deckList[$deckNo] : null;
    }

    public function getDeckByKey($deckKey)
    {
        foreach ($this->deckList as $deck) {
            if ($deck->getKey() === $deckKey) {
                return $deck;
            }
        }
        return null;
    }

    public function save($now = false)
    {
        $this->saveLater = true;
        if ($now) {
            if (headers_sent()) {
                throw new Exception('will not save "' . $this->file . '", an error occured?! oAO');
            } else {
                $this->doc->save($this->file);
            }
        }
    }

    public function parseRequest(HTTPRequest $request, DOMDocument $dataDoc)
    {
        $retNodes = [];
        if ($request->getInputValue('deck-add') and $data = $request->getInputJSON()) {
            $cardName = $data['cardName'];
            $deck = $this->getDeck($data['deckNo']);
            $stock = (int) $data['stock'];
            if ($cardName and $deck) {
                if ($deck->hasCard($cardName)) {
                    $deck->setStock($cardName, $deck->getStock($cardName) + $stock);
                } else {
                    $deck->addCard($cardName);
                }
                if (! $deck->getStock($cardName)) {
                    $deck->removeCard($cardName);
                }
                $this->save();
            }
        }
        return $retNodes;
    }

    public function asObject()
    {
        $ret = [];
        
        $ret['name'] = $this->name;
        $ret['key'] = $this->key;
        $ret['deckList'] = [];
        foreach ($this->deckList as $no => $deck) {
            $ret['deckList'][$no] = $deck->asObject();
        }
        
        return $ret;
    }

    public function asNode(DOMDocument $dataDoc, $loadDecks = true)
    {
        $retNode = $dataDoc->createElement('player');
        $arr = [];
        $arr['key'] = $this->key;
        $arr['name'] = $this->name;
        $arr['name'] = $this->name;
        foreach ($arr as $key => $val) {
            $retNode->setAttribute($key, $val);
        }
        foreach ($this->deckList as $no => $deck) {
            $node = $deck->asNode($dataDoc, $loadDecks);
            $node->setAttribute('no', $no);
            $retNode->appendChild($node);
        }
        return $retNode;
    }
}

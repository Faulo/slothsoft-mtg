<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet version="1.0"	xmlns="http://www.w3.org/1999/xhtml"	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">		<xsl:import href="/getTemplate.php/mtg/global"/>		<xsl:template match="/data/data[@data-cms-name = 'deck']">		<html>			<xsl:call-template name="sites.head"/>			<body>				<xsl:call-template name="sites.navi"/>				<main>					<!--					<h1 style="background-color: red; color: white"><code>UNDER CONSTRUCTION! </code>&#160;<small> some things might not be pretty atm ♥</small></h1>					-->					<xsl:for-each select="result">						<h3><xsl:value-of select="@message"/></h3>					</xsl:for-each>					<h1>						<xsl:value-of select="deck/@name"/>						<xsl:value-of select="concat(' (', count(deck//card), '/', sum(deck//card/@stock), ')')"/>					</h1>					<xsl:apply-templates select="deck"/>				</main>			</body>		</html>	</xsl:template>		<xsl:template match="/data/data[@data-cms-name = 'show']">		<html>			<head>				<title>					<xsl:value-of select="concat(deck/@name, ' - ', deck/@player)"/>				</title>				<meta name="viewport" content="width=device-width, initial-scale=1"/>			</head>			<body>				<xsl:for-each select="deck">					<main>						<h1>							<xsl:value-of select="@name"/>							<xsl:value-of select="concat(' (', sum(card/@stock), ' cards)')"/>							<small>								<xsl:text> (by </xsl:text>								<xsl:value-of select="@player"/>								<xsl:text>)</xsl:text>							</small>						</h1>						<xsl:call-template name="deck">							<xsl:with-param name="deck" select="."/>							<xsl:with-param name="mode" select="'default'"/>						</xsl:call-template>					</main>				</xsl:for-each>			</body>		</html>	</xsl:template>		<xsl:template match="deck[@mode = 'view']">		<xsl:call-template name="deck">			<xsl:with-param name="deck" select="."/>			<xsl:with-param name="mode" select="'default'"/>		</xsl:call-template>	</xsl:template>		<xsl:template match="deck[@mode = 'sort-rarity']">		<xsl:call-template name="deck">			<xsl:with-param name="deck" select="."/>			<xsl:with-param name="mode" select="'rarity'"/>		</xsl:call-template>	</xsl:template>		<xsl:template match="deck[@mode = 'sort-expansion']">		<xsl:call-template name="deck">			<xsl:with-param name="deck" select="."/>			<xsl:with-param name="mode" select="'expansion'"/>		</xsl:call-template>	</xsl:template>		<xsl:template match="deck[@mode = 'sort-legality']">		<xsl:call-template name="deck">			<xsl:with-param name="deck" select="."/>			<xsl:with-param name="mode" select="'legality'"/>		</xsl:call-template>	</xsl:template>		<xsl:template match="deck[@mode = 'sort-color']">		<xsl:call-template name="deck">			<xsl:with-param name="deck" select="."/>			<xsl:with-param name="mode" select="'color'"/>		</xsl:call-template>	</xsl:template>		<xsl:template match="deck[@mode = 'edit']">		<form method="POST" action=".">			<fieldset class="search">				<legend>Deck Modification Thing</legend>				<div>					<input type="text" name="name" value="{@name}"/>					<button type="submit" name="deck-name" value="1">Change Name. °u°</button>					<button type="submit" name="deck-stock" value="1">Save Stock Count ▼ /o/</button>					<select name="type">						<xsl:for-each select="type">							<option value="{@name}" data-dict="">								<xsl:if test="@name = ../@type">									<xsl:attribute name="selected">selected</xsl:attribute>								</xsl:if>								<xsl:text>deck/type/</xsl:text>								<xsl:value-of select="@name"/>							</option>						</xsl:for-each>					</select>					<button type="submit" name="deck-type" value="1">Change Deck Type. *A*</button>				</div>			</fieldset>			<xsl:call-template name="deck">				<xsl:with-param name="deck" select="."/>				<xsl:with-param name="mode" select="'edit'"/>			</xsl:call-template>		</form>	</xsl:template>		<xsl:template match="deck[@mode = 'search']">		<xsl:variable name="search" select="../search"/>		<form method="GET" action=".">			<fieldset class="search">				<legend>					Card Search Thing					<xsl:if test="$search">(Result: <xsl:value-of select="count($search//card)"/> cards)</xsl:if>				</legend>				<div>					<xsl:call-template name="search.input">						<xsl:with-param name="search" select="$search"/>						<xsl:with-param name="key" select="'search-query'"/>					</xsl:call-template>										<button type="submit">Search!! °o°</button>				</div>			</fieldset>			<xsl:call-template name="deck">				<xsl:with-param name="deck" select="$search"/>				<xsl:with-param name="mode" select="'search'"/>			</xsl:call-template>		</form>	</xsl:template>		<xsl:template match="deck[@mode = 'filter']">		<xsl:variable name="search" select="../search"/>		<form method="GET" action=".">			<fieldset class="search">				<legend>					Filter cards of this deck					<xsl:if test="$search">(Result: <xsl:value-of select="sum($search//card/@stock)"/> cards)</xsl:if>				</legend>				<div>					<xsl:call-template name="search.input">						<xsl:with-param name="search" select="$search"/>						<xsl:with-param name="key" select="'filter-query'"/>					</xsl:call-template>										<button type="submit">Filter!! *o*</button>				</div>			</fieldset>		</form>		<xsl:call-template name="deck">			<xsl:with-param name="deck" select="$search"/>			<xsl:with-param name="mode" select="'filter'"/>		</xsl:call-template>	</xsl:template>		<xsl:template match="deck[@mode = 'import-txt']">		<xsl:apply-templates select="." mode="import"/>	</xsl:template>		<xsl:template match="deck[@mode = 'export-txt']">		<xsl:apply-templates select="." mode="export"/>	</xsl:template>		<xsl:template match="deck[@mode = 'remove-txt']">		<xsl:apply-templates select="." mode="remove"/>	</xsl:template>		<xsl:template match="deck[@mode = 'checklist']">		<xsl:apply-templates select="../checklist"/>	</xsl:template>		<xsl:template match="deck[@mode = 'pricelist']">		<xsl:apply-templates select="../pricelist"/>	</xsl:template>		<xsl:template match="deck" mode="export">		<xsl:variable name="cardList" select=".//card[@stock &gt; 0]"/>		<fieldset class="export">			<legend>Export</legend>			<xsl:call-template name="cardList">				<xsl:with-param name="cardList" select="$cardList"/>				<xsl:with-param name="mode" select="'export'"/>			</xsl:call-template>		</fieldset>	</xsl:template>		<xsl:template match="deck" mode="import">		<xsl:variable name="searchList" select="../search"/>		<xsl:variable name="cardList" select="./card"/>				<form action="./" method="POST">			<fieldset class="import">				<legend>Import</legend>				<textarea cols="80" rows="10" name="import-data" autofocus="autofocus" placeholder=" 3 Thalia, Guardian of Thraben">					<xsl:for-each select="$searchList">						<xsl:value-of select="concat(@stock, ' ', @query)"/>						<xsl:text></xsl:text>					</xsl:for-each>				</textarea>				<br/>				<button name="import-submit-text" type="submit">Verify Card Existence</button>			</fieldset>		</form>		<xsl:choose>			<xsl:when test="$searchList and $searchList[count(card) = 0]">				<form action="." method="POST">					<fieldset class="import">						<legend>							<xsl:value-of select="sum($searchList[count(card) = 0]/@stock)"/>							<xsl:text> cards not found!! °A° </xsl:text>							<small>								<xsl:text>(</xsl:text>								<xsl:value-of select="sum($searchList/card[1]/../@stock)"/>								<xsl:text> cards ready to import!)</xsl:text>							</small>						</legend>						<xsl:apply-templates select=".." mode="import"/>						<button name="import-verify-list" type="submit" value="1">Verify Card Existence (again)</button>					</fieldset>				</form>			</xsl:when>			<xsl:when test="$searchList">				<form action="../edit/" method="POST">					<fieldset class="import">						<legend>							<strong><xsl:value-of select="sum($searchList/card[1]/../@stock)"/></strong>							<xsl:text> cards ready to import!</xsl:text>						</legend>						<xsl:apply-templates select=".." mode="import"/>						<button name="import-submit-list" type="submit" value="1">Add cards to deck</button>					</fieldset>				</form>			</xsl:when>		</xsl:choose>	</xsl:template>		<xsl:template match="*" mode="import">		<xsl:variable name="searchList" select="search"/>		<table class="import">			<thead>				<th>Adding amount</th>				<th>of Card</th>			</thead>			<tbody>				<xsl:for-each select="$searchList">					<tr>						<th>							<input type="number" value="{@stock}" name="card-stock-list[]"/>						</th>						<td>							<xsl:choose>								<xsl:when test="count(card) = 0">									<input type="text" value="{@query}" name="card-add-list[]"/>								</xsl:when>								<xsl:when test="count(card) = 1">									<input type="hidden" value="{card/@name}" name="card-add-list[]"/>									<select disabled="disabled">										<option><xsl:value-of select="card/@name"/></option>									</select>								</xsl:when>								<xsl:otherwise>									<select name="card-add-list[]">										<xsl:for-each select="card">											<option>												<xsl:if test="@name = ../@query">													<xsl:attribute name="selected">selected</xsl:attribute>												</xsl:if>												<xsl:value-of select="@name"/>											</option>										</xsl:for-each>									</select>								</xsl:otherwise>							</xsl:choose>						</td>						<td>							<xsl:choose>								<xsl:when test="count(card) = 0">									<strong>???</strong>								</xsl:when>								<xsl:otherwise>									<ul>										<xsl:for-each select="card">											<li><xsl:call-template name="card.href"/></li>										</xsl:for-each>									</ul>								</xsl:otherwise>							</xsl:choose>						</td>					</tr>				</xsl:for-each>			</tbody>		</table>	</xsl:template>			<xsl:template match="deck" mode="remove">		<xsl:variable name="searchList" select="../search"/>		<xsl:variable name="cardList" select="./card"/>				<form action="./" method="POST">			<fieldset class="import">				<legend>Remove</legend>				<textarea cols="80" rows="10" name="import-data" autofocus="autofocus" placeholder=" 3 Thalia, Guardian of Thraben">					<xsl:for-each select="$searchList">						<xsl:value-of select="concat(@stock, ' ', @query)"/>						<xsl:text></xsl:text>					</xsl:for-each>				</textarea>				<br/>				<button name="import-submit-text" type="submit">Verify Card Existence</button>			</fieldset>		</form>		<xsl:choose>			<xsl:when test="$searchList and $searchList[count(card) = 0]">				<form action="." method="POST">					<fieldset class="import">						<legend>							<xsl:value-of select="sum($searchList[count(card) = 0]/@stock)"/>							<xsl:text> cards not found!! °A° </xsl:text>							<small>								<xsl:text>(</xsl:text>								<xsl:value-of select="sum($searchList/card[1]/../@stock)"/>								<xsl:text> cards ready to import!)</xsl:text>							</small>						</legend>						<xsl:apply-templates select=".." mode="import"/>						<button name="import-verify-list" type="submit" value="1">Verify Card Existence (again)</button>					</fieldset>				</form>			</xsl:when>			<xsl:when test="$searchList">				<form action="../edit/" method="POST">					<fieldset class="import">						<legend>							<strong><xsl:value-of select="sum($searchList/card[1]/../@stock)"/></strong>							<xsl:text> cards ready to remove!</xsl:text>						</legend>						<xsl:apply-templates select=".." mode="remove"/>						<button name="import-submit-list" type="submit" value="1">Remove cards from deck</button>					</fieldset>				</form>			</xsl:when>		</xsl:choose>	</xsl:template>		<xsl:template match="*" mode="remove">		<xsl:variable name="searchList" select="search"/>		<table class="import">			<thead>				<th>Removing amount</th>				<th>of Card</th>			</thead>			<tbody>				<xsl:for-each select="$searchList">					<tr>						<th>							<input type="number" value="{@stock}" name="card-stock-list[]"/>						</th>						<td>							<xsl:choose>								<xsl:when test="count(card) = 0">									<input type="text" value="{@query}" name="card-remove-list[]"/>								</xsl:when>								<xsl:when test="count(card) = 1">									<input type="hidden" value="{card/@name}" name="card-remove-list[]"/>									<select disabled="disabled">										<option><xsl:value-of select="card/@name"/></option>									</select>								</xsl:when>								<xsl:otherwise>									<select name="card-remove-list[]">										<xsl:for-each select="card">											<option>												<xsl:if test="@name = ../@query">													<xsl:attribute name="selected">selected</xsl:attribute>												</xsl:if>												<xsl:value-of select="@name"/>											</option>										</xsl:for-each>									</select>								</xsl:otherwise>							</xsl:choose>						</td>						<td>							<xsl:choose>								<xsl:when test="count(card) = 0">									<strong>???</strong>								</xsl:when>								<xsl:otherwise>									<ul>										<xsl:for-each select="card">											<li><xsl:call-template name="card.href"/></li>										</xsl:for-each>									</ul>								</xsl:otherwise>							</xsl:choose>						</td>					</tr>				</xsl:for-each>			</tbody>		</table>	</xsl:template>				<xsl:template match="checklist">		<div class="deck checklist">						<xsl:for-each select="set">				<xsl:variable name="expansionNode" select="."/>				<details class="expansion">					<summary>						<xsl:value-of select="@name"/>						<xsl:text>: </xsl:text>						<small>							<xsl:value-of select="concat(count(card[@owned]), ' out of ', count(card), ' cards owned')"/>						</small>					</summary>					<div>												<xsl:if test="count(card)">							<table class="checklist">								<caption>									<h2>										<a href="{card/@href-set}" rel="external">											<xsl:value-of select="@name"/>										</a>									</h2>									<h4>										<xsl:text>Missing: </xsl:text>										<xsl:for-each select="//categories/rarity">											<xsl:variable name="cardList" select="$expansionNode/card[@rarity = current()]"/>											<xsl:value-of select="concat(count($cardList[not(@owned)]), ' ', ., '; ')"/>										</xsl:for-each>									</h4>								</caption>								<thead>									<tr>										<th></th>										<!--										<th>#</th>										-->										<th>Name</th>										<!--										<th>Artist</th>										<th>Color</th>										-->										<th>Rarity</th>										<th>Price</th>									</tr>								</thead>								<tbody>									<xsl:for-each select="card">										<xsl:sort select="@rarity"/>										<xsl:sort select="@sort"/>										<tr data-card-stock="{@stock}">											<td>												<input type="checkbox" disabled="disabled" title="Cards owned: {@stock}">													<xsl:if test="@owned">														<xsl:attribute name="checked">checked</xsl:attribute>													</xsl:if>												</input>											</td>											<!--											<td class="price"><xsl:value-of select="@no"/></td>											-->											<td><xsl:call-template name="card.href"/></td>											<!--											<td><xsl:value-of select="@artist"/></td>											<td><xsl:value-of select="@cost"/></td>											-->											<td><xsl:value-of select="@rarity"/></td>											<td class="price"><a href="{@href-price}" rel="external"><xsl:value-of select="@price"/></a></td>										</tr>									</xsl:for-each>								</tbody>							</table>						</xsl:if>					</div>				</details>			</xsl:for-each>		</div>	</xsl:template>		<xsl:template match="pricelist">		<div class="deck checklist">						<xsl:for-each select="set">				<xsl:variable name="expansionNode" select="."/>				<xsl:variable name="cardList" select=".//card[@price != '0.00']"/>				<details class="expansion" open="open">					<summary>						<xsl:value-of select="@name"/>						<xsl:text>: </xsl:text>						<small>							<xsl:value-of select="concat(count($cardList), ' cards')"/>						</small>					</summary>					<div>						<xsl:if test="count($cardList)">							<table class="checklist">								<caption>									<h2>										<a href="{@href}" rel="external">											<xsl:value-of select="@name"/>										</a>									</h2>									<!--									<h4>										<xsl:text>Missing: </xsl:text>										<xsl:for-each select="//categories/rarity">											<xsl:variable name="cardList" select="$expansionNode/$cardList[@rarity = current()]"/>											<xsl:value-of select="concat(count($cardList[not(@owned)]), ' ', ., '; ')"/>										</xsl:for-each>									</h4>									-->								</caption>								<thead>									<tr>										<!--										<th></th>										<th>#</th>										-->										<th>Name</th>										<!--										<th>Artist</th>										<th>Color</th>										-->										<th>Rarity</th>										<th>Price</th>									</tr>								</thead>								<tfoot>									<tr>										<!--										<th></th>										<th>#</th>										-->										<th>Total</th>										<!--										<th>Artist</th>										<th>Color</th>										-->										<th></th>										<th><xsl:value-of select="sum($cardList/@price)"/></th>									</tr>								</tfoot>								<tbody>									<xsl:for-each select="$cardList">										<xsl:sort select="@price" data-type="number" order="descending"/>										<tr><!--  data-card-stock="{@stock}"											<td>												<input type="checkbox" disabled="disabled" title="Cards owned: {@stock}">													<xsl:if test="@owned">														<xsl:attribute name="checked">checked</xsl:attribute>													</xsl:if>												</input>											</td>											<td class="price"><xsl:value-of select="@set_no"/></td>											-->											<td><xsl:call-template name="card.href"/></td>											<!--											<td><xsl:value-of select="@artist"/></td>											<td><xsl:value-of select="@cost"/></td>											-->											<td><xsl:value-of select="@rarity"/></td>											<td class="price"><a href="{@href-price}" rel="external"><xsl:value-of select="@price"/></a></td>										</tr>									</xsl:for-each>								</tbody>							</table>						</xsl:if>					</div>				</details>			</xsl:for-each>		</div>	</xsl:template></xsl:stylesheet>